(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{209:function(e,a,t){e.exports=t.p+"assets/img/2020-02-27_001252.e230c345.png"},222:function(e,a,t){"use strict";t.r(a);var n=t(0),r=Object(n.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"go语言读书笔记"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#go语言读书笔记"}},[e._v("#")]),e._v(" go语言读书笔记")]),e._v(" "),n("p",[e._v("go语言接口更小,更倾向于定义一个单一的动作,而java习惯在接口中定义多个动作,\njava中要求用户必须显式声明并实现User中所有的约束")]),e._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("User")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("login")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("logout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" Reader "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    Read "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("p "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("n "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" err "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("h3",{attrs:{id:"配置环境"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置环境"}},[e._v("#")]),e._v(" 配置环境")]),e._v(" "),n("p",[e._v("go env -w GOPROXY=https://goproxy.cn,direct")]),e._v(" "),n("blockquote",[n("p",[e._v("使用go module\ngo env -w GO111MODULE=on")])]),e._v(" "),n("h3",{attrs:{id:"对于没有go-mod初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对于没有go-mod初始化"}},[e._v("#")]),e._v(" 对于没有go.mod初始化")]),e._v(" "),n("p",[e._v("go mod init 项目名")]),e._v(" "),n("h3",{attrs:{id:"安装goimports工具"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装goimports工具"}},[e._v("#")]),e._v(" 安装goimports工具")]),e._v(" "),n("blockquote",[n("p",[e._v("Many text editors can be configured to run gofmt each time you save a file,\nso that your source code is always properly formatted. A related tool, goimports ,\nadditionally manages the insertion and removal of import declarations as needed.\nIt is not part of the standard distribution but you can obtain it with this command:")])]),e._v(" "),n("ul",[n("li",[e._v("go get -v golang.org/x/tools/cmd/goimports")]),e._v(" "),n("li",[e._v("idea 中需要先安装 file watchers plugins\n"),n("img",{attrs:{src:t(209),alt:"img"}})])]),e._v(" "),n("h2",{attrs:{id:"go-语言的变量定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#go-语言的变量定义"}},[e._v("#")]),e._v(" go 语言的变量定义")]),e._v(" "),n("h4",{attrs:{id:"使用var关键字"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用var关键字"}},[e._v("#")]),e._v(" 使用var关键字")]),e._v(" "),n("pre",[n("code",[e._v("* var a,b,c bool \n* var 可以在包内或者函数内\n* var 可以集中定义一批不同类型的变量\n")])]),e._v(" "),n("h4",{attrs:{id:"使用类型自动推断-type-deduction"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用类型自动推断-type-deduction"}},[e._v("#")]),e._v(" 使用类型自动推断(type deduction)")]),e._v(" "),n("pre",[n("code",[e._v("* 可以省略掉type类型,go语言能根据右侧赋值自动推断\n")])]),e._v(" "),n("h4",{attrs:{id:"使用-简化赋值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-简化赋值"}},[e._v("#")]),e._v(" 使用:= 简化赋值")]),e._v(" "),n("pre",[n("code",[e._v("* 只能在函数内部使用\n* 可以定义一批不同类型变量\n")])]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/macheng2017/go-learn/commit/4740aacf4ee01d65eeb46a48f70c82cddbbee33d",target:"_blank",rel:"noopener noreferrer"}},[e._v("feat:使用%q打印出空串 · macheng2017/go-learn@4740aac"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/macheng2017/go-learn/commit/a55f6d5f8a0e88df3967a0e590c68e13fb4773ae",target:"_blank",rel:"noopener noreferrer"}},[e._v("feat:在使用自动类型推断的时候可以将不同类型的变量放到一行上进行赋值 · macheng2017/go-learn@a55f6d5"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/macheng2017/go-learn/commit/14a295a7701a2ce1cb50f0a6b4f6d039cc191ce0",target:"_blank",rel:"noopener noreferrer"}},[e._v("feat:更简便的变量定义方式 := · macheng2017/go-learn@14a295a"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/macheng2017/go-learn/commit/47e226acdef39389b9e4d6bb748ce09c3315fcbf",target:"_blank",rel:"noopener noreferrer"}},[e._v("feat: 这里作用域是包内部的 go语言没有全局变量 · macheng2017/go-learn@47e226a"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/macheng2017/go-learn/commit/fdc73b3612bc0dd0303110ac15b80ae8cbfaf326",target:"_blank",rel:"noopener noreferrer"}},[e._v("feat: 省略掉var的写法 · macheng2017/go-learn@fdc73b3"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/macheng2017/go-learn/commit/4322ea232e584914aef84ff25dea212d118cdfc2",target:"_blank",rel:"noopener noreferrer"}},[e._v("feat: 省略掉var的写法 · macheng2017/go-learn@4322ea2"),n("OutboundLink")],1)])]),e._v(" "),n("blockquote",[n("p",[e._v("https://golang.org/pkg")]),e._v(" "),n("p",[e._v("the same code is part of the downloaded distribution.\nUse this to figure out how something works, or to answer questions about details,\n"),n("strong",[e._v("or merely to see how experts write really good Go.")]),e._v("\nBrian W. Kernighan. The Go Programming Language (Addison-Wesley Professional Computing Series) (Kindle 位置 359-361). Addison-Wesley Professional.")])]),e._v(" "),n("blockquote",[n("p",[e._v("blog.golang.org")]),e._v(" "),n("p",[e._v("publishes some of the best writing on Go,\nwith articles on the state of the language,\nplans for the future, reports on conferences,\nand in-depth explanations of a wide variety of Go-related topics.\nBrian W. Kernighan. The Go Programming Language (Addison-Wesley Professional Computing Series) (Kindle 位置 343-345). Addison-Wesley Professional.")])]),e._v(" "),n("p",[e._v("go组织文件的方式package,类似其他语言的 lib  modules , 一个package包中有存放在***单个目录***的一个或者多个\n以.go结尾的源文件中构成,用来定义这个包的作用")]),e._v(" "),n("blockquote",[n("p",[e._v("Go code is organized into packages,\nwhich are similar to libraries or modules in other languages.\nA package consists of one or more .go source files in a single directory that define what the package does.\nBrian W. Kernighan. The Go Programming Language (Addison-Wesley Professional Computing Series) (Kindle 位置 423-425). Addison-Wesley Professional.")])]),e._v(" "),n("ul",[n("li",[e._v("每个go文件第一行为package声明,表明当前go文件的归属于这个包")]),e._v(" "),n("li",[e._v("接下来是引入(imports)其他包的文件存储位置的声明")])]),e._v(" "),n("h2",{attrs:{id:"内建变量类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内建变量类型"}},[e._v("#")]),e._v(" 内建变量类型")]),e._v(" "),n("ul",[n("li",[e._v("bool string")]),e._v(" "),n("li")]),e._v(" "),n("p",[e._v("(u)int\n(u)int8\n(u)int16\n(u)int32\n(u)int64\nuintptr 指针\nbyte(1byte = 8bit)\nrune 32位的go语言的char类型,char只有1字节(4byte是int32的一个别名)\nfloat32\nfloat64\ncomplex64    复数\ncomplex128")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/macheng2017/go-learn/commit/458797781c15461f87367ef3acea7b94547b027c",target:"_blank",rel:"noopener noreferrer"}},[e._v("feat: 复数的写法 · macheng2017/go-learn@4587977"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/macheng2017/go-learn/commit/61f5bc8ead18b0aa52808c338ac787da14b8578c",target:"_blank",rel:"noopener noreferrer"}},[e._v("feat: 验证欧拉公式 · macheng2017/go-learn@61f5bc8"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/macheng2017/go-learn/commit/091e41feacc007df63b654fb102f72fc623aee97",target:"_blank",rel:"noopener noreferrer"}},[e._v("feat: 验证欧拉公式 · macheng2017/go-learn@091e41f"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/macheng2017/go-learn/commit/6110d25aef87fb279a2da4f092ad8687d13658db",target:"_blank",rel:"noopener noreferrer"}},[e._v("feat: 验证欧拉公式,保留3位小数 · macheng2017/go-learn@6110d25"),n("OutboundLink")],1)])]),e._v(" "),n("h3",{attrs:{id:"go类型转换是强制的-显式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#go类型转换是强制的-显式"}},[e._v("#")]),e._v(" go类型转换是强制的(显式)")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/macheng2017/go-learn/commit/d817714c7013b186bf2b5810337f7a32aace02a7",target:"_blank",rel:"noopener noreferrer"}},[e._v("feat: 在go中只有强制类型转换(显式转换) · macheng2017/go-learn@d817714"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/macheng2017/go-learn/commit/5936e00e972d411585bd81c9da5885ea35178814",target:"_blank",rel:"noopener noreferrer"}},[e._v("feat: // 现在的问题是,使用float会出现精度不够问题,即本来是一个整数,会出现小于这个整数的情况 · macheng2017/go-learn@5936e00"),n("OutboundLink")],1)])]),e._v(" "),n("p",[n("a",{attrs:{href:"https://segmentfault.com/q/1010000015409775/",target:"_blank",rel:"noopener noreferrer"}},[e._v("golang - go float 精度丢失问题 - SegmentFault 思否"),n("OutboundLink")],1),e._v(" "),n("a",{attrs:{href:"https://www.golangtc.com/t/551cf5a8421aa9704b000070",target:"_blank",rel:"noopener noreferrer"}},[e._v("golang float64*float64 精度出现偏差要怎么解决啊?急急急急急急， - Golang 中国"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"常量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[e._v("#")]),e._v(" 常量")]),e._v(" "),n("ul",[n("li",[n("p",[e._v('const filename = "abc.txt"')])]),e._v(" "),n("li",[n("p",[e._v("const a,b = 5,6")])]),e._v(" "),n("li",[n("p",[e._v("const 数值可作为各种类型使用")])]),e._v(" "),n("li",[n("p",[e._v("var c int = int(math.Sqrt(a"),n("em",[e._v("a + b")]),e._v("b))")])]),e._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://github.com/macheng2017/go-learn/commit/a69388e65be0475368148796740c2e2e6514727a",target:"_blank",rel:"noopener noreferrer"}},[e._v("feat: 常量的定义 · macheng2017/go-learn@a69388e"),n("OutboundLink")],1),e._v("\n很奇怪这里使用const常量之后,sqrt()中参数a,b不用强制转换?\n这里a,b定义为常量之后类似文本替换,既可以做int也可以做float,所以不用强转")])])]),e._v(" "),n("h3",{attrs:{id:"枚举类型-特殊的常量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#枚举类型-特殊的常量"}},[e._v("#")]),e._v(" 枚举类型(特殊的常量)")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("枚举类型直接定义为常量即可")])]),e._v(" "),n("li",[n("p",[e._v("自增枚举类型 iota")])]),e._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://github.com/macheng2017/go-learn/commit/7a3102006d03a8f74129cda15e108da3d41dccce",target:"_blank",rel:"noopener noreferrer"}},[e._v("feat: 枚举类型直接定义为const即可 · macheng2017/go-learn@7a31020"),n("OutboundLink")],1)])]),e._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://github.com/macheng2017/go-learn/commit/36dc4ed517941c8ef8ff5d5a07b7f3a74b4aac69",target:"_blank",rel:"noopener noreferrer"}},[e._v("feat: 枚举类型iota自增加 · macheng2017/go-learn@36dc4ed"),n("OutboundLink")],1)])]),e._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://github.com/macheng2017/go-learn/commit/ffe3034d9d2aa56c969282ba383709f65d1a01e8",target:"_blank",rel:"noopener noreferrer"}},[e._v("feat: 枚举类型iota 可以作为自增值的一个种子 · macheng2017/go-learn@ffe3034"),n("OutboundLink")],1),e._v("\n> <<是左移动，自增是通过go语言的iota实现，iota开始是0，\n> 然后是1，2，3，4，参与运算之后变成1<<10,1<<20,1<<30，\n> 也就是10"),n("em",[e._v("1，10")]),e._v("2,然后左移动10位就是的10次方也就是1024")])]),e._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://github.com/macheng2017/go-learn/commit/b08c69bb4af002775e1041def45cb2899f27edd4",target:"_blank",rel:"noopener noreferrer"}},[e._v("feat: 枚举类型iota 添加注释 · macheng2017/go-learn@b08c69b"),n("OutboundLink")],1)])])]),e._v(" "),n("h2",{attrs:{id:"变量总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变量总结"}},[e._v("#")]),e._v(" 变量总结")]),e._v(" "),n("ul",[n("li",[e._v("变量类型写在变量名之后")]),e._v(" "),n("li",[e._v("编译器可推测变量类型")]),e._v(" "),n("li",[e._v("没有char,只有rune")]),e._v(" "),n("li",[e._v("原生支持复数类型")])])])}),[],!1,null,null,null);a.default=r.exports}}]);